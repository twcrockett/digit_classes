"0","# Function to create a workflow with a model and the recipe"
"0","create_workflow <- function(model) {"
"0","  workflow() %>%"
"0","    add_recipe(usps_recipe) %>%"
"0","    add_model(model)"
"0","}"
"0",""
"0","# Function to tune hyperparameters using grid search"
"0","tune_model <- function(workflow, params, folds) {"
"0","  workflow %>%"
"0","    tune_grid("
"0","      resamples = folds,"
"0","      grid = params,"
"0","      metrics = metric_set(accuracy, roc_auc),"
"0","      control = control_grid(save_pred = TRUE, verbose = TRUE)"
"0","    )"
"0","}"
"0",""
"0","# Function to select the best model and finalize workflow"
"0","finalize_best_model <- function(tune_results) {"
"0","  best_params <- tune_results %>% select_best(metric = ""accuracy"")"
"0","  workflow <- tune_results %>% extract_workflow()"
"0","  workflow %>% finalize_workflow(best_params)"
"0","}"
"0",""
"0","# Function to evaluate and visualize results"
"0","evaluate_model <- function(model_fit, test_data, model_name) {"
"0","  # Get predictions"
"0","  predictions <- model_fit %>%"
"0","    predict(test_data) %>%"
"0","    bind_cols(test_data %>% select(label))"
"0","  "
"0","  # Calculate accuracy"
"0","  accuracy <- accuracy_vec(predictions$label, predictions$.pred_class)"
"0","  "
"0","  # Confusion matrix"
"0","  conf_mat <- conf_mat(predictions, truth = label, estimate = .pred_class)"
"0","  "
"0","  # Visualize confusion matrix"
"0","  p_conf <- autoplot(conf_mat, type = ""heatmap"") +"
"0","    scale_fill_viridis_c() +"
"0","    labs(title = paste(model_name, ""Confusion Matrix""),"
"0","         subtitle = paste(""Accuracy:"", round(accuracy, 4)))"
"0","  "
"0","  # Get class probabilities if available"
"0","  if (has_probs(model_fit)) {"
"0","    probs <- model_fit %>%"
"0","      predict(test_data, type = ""prob"") %>%"
"0","      bind_cols(test_data %>% select(label))"
"0","    "
"0","    # ROC curve"
"0","    p_roc <- probs %>%"
"0","      roc_curve(truth = label, contains("".pred_"")) %>%"
"0","      autoplot() +"
"0","      labs(title = paste(model_name, ""ROC Curve""))"
"0","    "
"0","    # PR curve"
"0","    p_pr <- probs %>%"
"0","      pr_curve(truth = label, contains("".pred_"")) %>%"
"0","      autoplot() +"
"0","      labs(title = paste(model_name, ""Precision-Recall Curve""))"
"0","    "
"0","    return(list("
"0","      accuracy = accuracy,"
"0","      conf_mat = conf_mat,"
"0","      plots = list(p_conf = p_conf, p_roc = p_roc, p_pr = p_pr)"
"0","    ))"
"0","  } else {"
"0","    return(list("
"0","      accuracy = accuracy,"
"0","      conf_mat = conf_mat,"
"0","      plots = list(p_conf = p_conf)"
"0","    ))"
"0","  }"
"0","}"
"0",""
"0","# Function to visualize residuals (misclassifications)"
"0","plot_residuals <- function(model_fit, test_data, n = 5) {"
"0","  predictions <- model_fit %>%"
"0","    predict(test_data) %>%"
"0","    bind_cols(test_data)"
"0","  "
"0","  # Find misclassifications"
"0","  misclassified <- predictions %>%"
"0","    filter(label != .pred_class) %>%"
"0","    mutate(actual = label, predicted = .pred_class) %>%"
"0","    group_by(actual, predicted) %>%"
"0","    slice_sample(n = min(n, n())) %>%"
"0","    ungroup()"
"0","  "
"0","  if (nrow(misclassified) == 0) {"
"0","    return(ggplot() + "
"0","            annotate(""text"", x = 0.5, y = 0.5, label = ""No misclassifications found!"") + "
"0","            theme_void())"
"0","  }"
"0","  "
"0","  # Extract misclassified digit vectors"
"0","  plots <- list()"
"0","  for (i in 1:nrow(misclassified)) {"
"0","    digit_vector <- misclassified$digit_vector[[i]]"
"0","    digit_matrix <- digit_to_matrix(digit_vector)"
"0","    "
"0","    plots[[i]] <- ggplot() +"
"0","      geom_tile(aes(x = rep(1:16, each = 16), "
"0","                    y = rep(16:1, 16),"
"0","                    fill = as.vector(digit_matrix))) +"
"0","      scale_fill_viridis_c() +"
"0","      theme_void() +"
"0","      labs(title = paste(""Actual:"", misclassified$actual[i], "
"0","                         ""Predicted:"", misclassified$predicted[i]))"
"0","  }"
"0","  "
"0","  grid.arrange(grobs = plots, ncol = 5)"
"0","}"
