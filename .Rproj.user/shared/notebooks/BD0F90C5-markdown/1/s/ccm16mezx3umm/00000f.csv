"0","#| warning: false"
"0","#| output: false"
"0","#| echo: false"
"0","#| eval: false"
"0",""
"0","def knn_classifier(X_train, X_test, y_train, y_test, n_neighbors, weights, p):"
"0","    # Scale data"
"0","    scaler = StandardScaler()"
"0","    X_train_scaled = scaler.fit_transform(X_train)"
"0","    X_test_scaled = scaler.transform(X_test)"
"0","    "
"0","    # Train KNN classifier"
"0","    clf = KNeighborsClassifier(n_neighbors=n_neighbors, weights=weights, p=p, n_jobs=-1)"
"0","    clf.fit(X_train_scaled, y_train)"
"0","    "
"0","    # Predict"
"0","    y_pred = clf.predict(X_test_scaled)"
"0","    "
"0","    return y_pred"
"0","    "
"0","knn_results = []"
"0",""
"0","for params in ParameterGrid(param_grids[""KNN""]):"
"0","    # Track metrics across folds"
"0","    fold_accuracies = []"
"0","    fold_precisions = []"
"0","    fold_recalls = []"
"0","    fold_times = []"
"0","    "
"0","    print(f""Testing KNN model with n_neighbors={params['n_neighbors']}, weights={params['weights']}, p={params['p']}"")"
"0","    "
"0","    # Perform k-fold cross-validation"
"0","    for fold_idx, (train_idx, test_idx) in enumerate(skf.split(X, y)):"
"0","        X_train, X_test = X[train_idx], X[test_idx]"
"0","        y_train, y_test = y[train_idx], y[test_idx]"
"0","        "
"0","        start_time = time.time()"
"0","        y_pred = knn_classifier(X_train, X_test, y_train, y_test, params['n_neighbors'], params['weights'], params['p'])"
"0","        elapsed_time = time.time() - start_time"
"0","        fold_times.append(elapsed_time)"
"0","        "
"0","        accuracy = accuracy_score(y_test, y_pred)"
"0","        report = classification_report(y_test, y_pred, output_dict=True)"
"0","        precision = report['weighted avg']['precision']"
"0","        recall = report['weighted avg']['recall']"
"0","        "
"0","        # Store results for this fold"
"0","        fold_accuracies.append(accuracy)"
"0","        fold_precisions.append(precision)"
"0","        fold_recalls.append(recall)"
"0","        "
"0","        print(f""  Fold {fold_idx+1}/{skf.n_splits}: Accuracy={accuracy:.4f}, Precision={precision:.4f}, Recall={recall:.4f}, Time={elapsed_time:.2f}s"")"
"0","    "
"0","    # Compute average metrics across all folds"
"0","    mean_accuracy = np.mean(fold_accuracies)"
"0","    mean_precision = np.mean(fold_precisions)"
"0","    mean_recall = np.mean(fold_recalls)"
"0","    total_time = sum(fold_times)"
"0","    f1_score = 2 * (mean_precision * mean_recall) / (mean_precision + mean_recall)"
"0","    "
"0","    # Store results for this parameter combination"
"0","    result = {"
"0","        'n_neighbors': params['n_neighbors'],"
"0","        'weights': params['weights'],"
"0","        'p': params['p'],"
"0","        'mean_accuracy': mean_accuracy,"
"0","        'mean_precision': mean_precision,"
"0","        'mean_recall': mean_recall,"
"0","        'f1_score': f1_score,"
"0","        'total_time': total_time"
"0","    }"
"0","    knn_results.append(result)"
"0","    "
"0","    print(f""  Average: Accuracy={mean_accuracy:.4f}, Precision={mean_precision:.4f}, Recall={mean_recall:.4f}, F1={f1_score:.4f}, Time={total_time:.2f}s"")"
"0","    "
"0","knn_df = calculate_selection_score(pd.DataFrame(knn_results))"
"1","Testing KNN model with n_neighbors=3, weights=uniform, p=1
"
"1","  Fold 1/5: Accuracy=0.9554, Precision=0.9558, Recall=0.9554, Time=0.57s
"
"1","  Fold 2/5: Accuracy=0.9591, Precision=0.9593, Recall=0.9591, Time=0.43s
"
"1","  Fold 3/5: Accuracy=0.9532, Precision=0.9536, Recall=0.9532, Time=0.41s
"
"1","  Fold 4/5: Accuracy=0.9457, Precision=0.9465, Recall=0.9457, Time=0.43s
"
"1","  Fold 5/5: Accuracy=0.9532, Precision=0.9538, Recall=0.9532, Time=0.43s
  Average: Accuracy=0.9533, Precision=0.9538, Recall=0.9533, F1=0.9536, Time=2.26s
Testing KNN model with n_neighbors=3, weights=distance, p=1
"
"1","  Fold 1/5: Accuracy=0.9575, Precision=0.9579, Recall=0.9575, Time=0.41s
  Fold 2/5: Accuracy=0.9591, Precision=0.9594, Recall=0.9591, Time=0.41s
"
"1","  Fold 3/5: Accuracy=0.9559, Precision=0.9562, Recall=0.9559, Time=0.44s
"
"1","  Fold 4/5: Accuracy=0.9484, Precision=0.9491, Recall=0.9484, Time=0.42s
"
"1","  Fold 5/5: Accuracy=0.9543, Precision=0.9548, Recall=0.9543, Time=0.39s
  Average: Accuracy=0.9550, Precision=0.9555, Recall=0.9550, F1=0.9553, Time=2.06s
Testing KNN model with n_neighbors=3, weights=uniform, p=2
  Fold 1/5: Accuracy=0.9522, Precision=0.9524, Recall=0.9522, Time=0.15s
"
"1","  Fold 2/5: Accuracy=0.9570, Precision=0.9573, Recall=0.9570, Time=0.16s
  Fold 3/5: Accuracy=0.9548, Precision=0.9554, Recall=0.9548, Time=0.11s
  Fold 4/5: Accuracy=0.9462, Precision=0.9467, Recall=0.9462, Time=0.14s
  Fold 5/5: Accuracy=0.9559, Precision=0.9563, Recall=0.9559, Time=0.14s
  Average: Accuracy=0.9532, Precision=0.9536, Recall=0.9532, F1=0.9534, Time=0.71s
Testing KNN model with n_neighbors=3, weights=distance, p=2
"
"1","  Fold 1/5: Accuracy=0.9554, Precision=0.9556, Recall=0.9554, Time=0.14s
  Fold 2/5: Accuracy=0.9591, Precision=0.9593, Recall=0.9591, Time=0.14s
  Fold 3/5: Accuracy=0.9554, Precision=0.9559, Recall=0.9554, Time=0.11s
"
"1","  Fold 4/5: Accuracy=0.9494, Precision=0.9500, Recall=0.9494, Time=0.15s
  Fold 5/5: Accuracy=0.9580, Precision=0.9584, Recall=0.9580, Time=0.14s
  Average: Accuracy=0.9555, Precision=0.9559, Recall=0.9555, F1=0.9557, Time=0.67s
Testing KNN model with n_neighbors=5, weights=uniform, p=1
"
"1","  Fold 1/5: Accuracy=0.9511, Precision=0.9514, Recall=0.9511, Time=0.38s
"
"1","  Fold 2/5: Accuracy=0.9511, Precision=0.9518, Recall=0.9511, Time=0.42s
  Fold 3/5: Accuracy=0.9548, Precision=0.9557, Recall=0.9548, Time=0.38s
"
"1","  Fold 4/5: Accuracy=0.9446, Precision=0.9459, Recall=0.9446, Time=0.38s
"
"1","  Fold 5/5: Accuracy=0.9537, Precision=0.9541, Recall=0.9537, Time=0.39s
  Average: Accuracy=0.9511, Precision=0.9518, Recall=0.9511, F1=0.9514, Time=1.94s
Testing KNN model with n_neighbors=5, weights=distance, p=1
"
"1","  Fold 1/5: Accuracy=0.9543, Precision=0.9547, Recall=0.9543, Time=0.43s
"
"1","  Fold 2/5: Accuracy=0.9532, Precision=0.9540, Recall=0.9532, Time=0.44s
"
"1","  Fold 3/5: Accuracy=0.9559, Precision=0.9565, Recall=0.9559, Time=0.42s
  Fold 4/5: Accuracy=0.9484, Precision=0.9493, Recall=0.9484, Time=0.40s
"
"1","  Fold 5/5: Accuracy=0.9548, Precision=0.9551, Recall=0.9548, Time=0.39s
  Average: Accuracy=0.9533, Precision=0.9539, Recall=0.9533, F1=0.9536, Time=2.09s
Testing KNN model with n_neighbors=5, weights=uniform, p=2
  Fold 1/5: Accuracy=0.9500, Precision=0.9503, Recall=0.9500, Time=0.15s
"
"1","  Fold 2/5: Accuracy=0.9543, Precision=0.9548, Recall=0.9543, Time=0.14s
  Fold 3/5: Accuracy=0.9565, Precision=0.9569, Recall=0.9565, Time=0.12s
  Fold 4/5: Accuracy=0.9419, Precision=0.9428, Recall=0.9419, Time=0.10s
"
"1","  Fold 5/5: Accuracy=0.9548, Precision=0.9550, Recall=0.9548, Time=0.14s
  Average: Accuracy=0.9515, Precision=0.9519, Recall=0.9515, F1=0.9517, Time=0.65s
Testing KNN model with n_neighbors=5, weights=distance, p=2
  Fold 1/5: Accuracy=0.9522, Precision=0.9524, Recall=0.9522, Time=0.13s
  Fold 2/5: Accuracy=0.9548, Precision=0.9552, Recall=0.9548, Time=0.13s
  Fold 3/5: Accuracy=0.9597, Precision=0.9601, Recall=0.9597, Time=0.15s
"
"1","  Fold 4/5: Accuracy=0.9435, Precision=0.9440, Recall=0.9435, Time=0.15s
  Fold 5/5: Accuracy=0.9554, Precision=0.9556, Recall=0.9554, Time=0.13s
  Average: Accuracy=0.9531, Precision=0.9535, Recall=0.9531, F1=0.9533, Time=0.69s
Testing KNN model with n_neighbors=7, weights=uniform, p=1
"
"1","  Fold 1/5: Accuracy=0.9468, Precision=0.9475, Recall=0.9468, Time=0.60s
"
"1","  Fold 2/5: Accuracy=0.9473, Precision=0.9482, Recall=0.9473, Time=0.61s
"
"1","  Fold 3/5: Accuracy=0.9532, Precision=0.9540, Recall=0.9532, Time=0.56s
"
"1","  Fold 4/5: Accuracy=0.9392, Precision=0.9405, Recall=0.9392, Time=0.58s
"
"1","  Fold 5/5: Accuracy=0.9548, Precision=0.9555, Recall=0.9548, Time=0.56s
  Average: Accuracy=0.9483, Precision=0.9491, Recall=0.9483, F1=0.9487, Time=2.91s
Testing KNN model with n_neighbors=7, weights=distance, p=1
"
"1","  Fold 1/5: Accuracy=0.9495, Precision=0.9500, Recall=0.9495, Time=0.41s
"
"1","  Fold 2/5: Accuracy=0.9538, Precision=0.9545, Recall=0.9538, Time=0.37s
"
"1","  Fold 3/5: Accuracy=0.9548, Precision=0.9556, Recall=0.9548, Time=0.43s
  Fold 4/5: Accuracy=0.9435, Precision=0.9446, Recall=0.9435, Time=0.42s
"
"1","  Fold 5/5: Accuracy=0.9570, Precision=0.9576, Recall=0.9570, Time=0.40s
  Average: Accuracy=0.9517, Precision=0.9525, Recall=0.9517, F1=0.9521, Time=2.02s
Testing KNN model with n_neighbors=7, weights=uniform, p=2
  Fold 1/5: Accuracy=0.9473, Precision=0.9477, Recall=0.9473, Time=0.11s
"
"1","  Fold 2/5: Accuracy=0.9511, Precision=0.9515, Recall=0.9511, Time=0.15s
  Fold 3/5: Accuracy=0.9511, Precision=0.9517, Recall=0.9511, Time=0.14s
  Fold 4/5: Accuracy=0.9398, Precision=0.9404, Recall=0.9398, Time=0.15s
"
"1","  Fold 5/5: Accuracy=0.9473, Precision=0.9478, Recall=0.9473, Time=0.17s
  Average: Accuracy=0.9473, Precision=0.9478, Recall=0.9473, F1=0.9476, Time=0.72s
Testing KNN model with n_neighbors=7, weights=distance, p=2
  Fold 1/5: Accuracy=0.9500, Precision=0.9505, Recall=0.9500, Time=0.17s
"
"1","  Fold 2/5: Accuracy=0.9516, Precision=0.9519, Recall=0.9516, Time=0.20s
  Fold 3/5: Accuracy=0.9532, Precision=0.9539, Recall=0.9532, Time=0.24s
  Fold 4/5: Accuracy=0.9419, Precision=0.9424, Recall=0.9419, Time=0.18s
"
"1","  Fold 5/5: Accuracy=0.9510, Precision=0.9517, Recall=0.9510, Time=0.17s
  Average: Accuracy=0.9496, Precision=0.9500, Recall=0.9496, F1=0.9498, Time=0.95s
Testing KNN model with n_neighbors=9, weights=uniform, p=1
"
"1","  Fold 1/5: Accuracy=0.9446, Precision=0.9454, Recall=0.9446, Time=0.55s
"
"1","  Fold 2/5: Accuracy=0.9489, Precision=0.9498, Recall=0.9489, Time=0.60s
"
"1","  Fold 3/5: Accuracy=0.9522, Precision=0.9532, Recall=0.9522, Time=0.57s
"
"1","  Fold 4/5: Accuracy=0.9387, Precision=0.9402, Recall=0.9387, Time=0.54s
"
"1","  Fold 5/5: Accuracy=0.9489, Precision=0.9501, Recall=0.9489, Time=0.41s
  Average: Accuracy=0.9467, Precision=0.9477, Recall=0.9467, F1=0.9472, Time=2.68s
Testing KNN model with n_neighbors=9, weights=distance, p=1
"
"1","  Fold 1/5: Accuracy=0.9473, Precision=0.9479, Recall=0.9473, Time=0.42s
"
"1","  Fold 2/5: Accuracy=0.9532, Precision=0.9541, Recall=0.9532, Time=0.46s
"
"1","  Fold 3/5: Accuracy=0.9559, Precision=0.9568, Recall=0.9559, Time=0.43s
"
"1","  Fold 4/5: Accuracy=0.9414, Precision=0.9424, Recall=0.9414, Time=0.44s
"
"1","  Fold 5/5: Accuracy=0.9505, Precision=0.9516, Recall=0.9505, Time=0.38s
  Average: Accuracy=0.9497, Precision=0.9506, Recall=0.9497, F1=0.9501, Time=2.14s
Testing KNN model with n_neighbors=9, weights=uniform, p=2
  Fold 1/5: Accuracy=0.9414, Precision=0.9420, Recall=0.9414, Time=0.15s
  Fold 2/5: Accuracy=0.9489, Precision=0.9494, Recall=0.9489, Time=0.14s
"
"1","  Fold 3/5: Accuracy=0.9478, Precision=0.9489, Recall=0.9478, Time=0.15s
  Fold 4/5: Accuracy=0.9354, Precision=0.9360, Recall=0.9354, Time=0.16s
  Fold 5/5: Accuracy=0.9516, Precision=0.9524, Recall=0.9516, Time=0.13s
  Average: Accuracy=0.9450, Precision=0.9457, Recall=0.9450, F1=0.9454, Time=0.73s
Testing KNN model with n_neighbors=9, weights=distance, p=2
  Fold 1/5: Accuracy=0.9441, Precision=0.9447, Recall=0.9441, Time=0.11s
"
"1","  Fold 2/5: Accuracy=0.9500, Precision=0.9503, Recall=0.9500, Time=0.13s
  Fold 3/5: Accuracy=0.9505, Precision=0.9513, Recall=0.9505, Time=0.11s
  Fold 4/5: Accuracy=0.9387, Precision=0.9390, Recall=0.9387, Time=0.14s
  Fold 5/5: Accuracy=0.9554, Precision=0.9559, Recall=0.9554, Time=0.12s
  Average: Accuracy=0.9477, Precision=0.9482, Recall=0.9477, F1=0.9480, Time=0.60s
Testing KNN model with n_neighbors=11, weights=uniform, p=1
"
"1","  Fold 1/5: Accuracy=0.9425, Precision=0.9433, Recall=0.9425, Time=0.44s
"
"1","  Fold 2/5: Accuracy=0.9425, Precision=0.9436, Recall=0.9425, Time=0.45s
"
"1","  Fold 3/5: Accuracy=0.9473, Precision=0.9485, Recall=0.9473, Time=0.57s
"
"1","  Fold 4/5: Accuracy=0.9365, Precision=0.9382, Recall=0.9365, Time=0.55s
"
"1","  Fold 5/5: Accuracy=0.9489, Precision=0.9502, Recall=0.9489, Time=0.57s
  Average: Accuracy=0.9435, Precision=0.9448, Recall=0.9435, F1=0.9442, Time=2.59s
Testing KNN model with n_neighbors=11, weights=distance, p=1
"
"1","  Fold 1/5: Accuracy=0.9446, Precision=0.9455, Recall=0.9446, Time=0.61s
"
"1","  Fold 2/5: Accuracy=0.9446, Precision=0.9457, Recall=0.9446, Time=0.61s
"
"1","  Fold 3/5: Accuracy=0.9489, Precision=0.9499, Recall=0.9489, Time=0.43s
"
"1","  Fold 4/5: Accuracy=0.9398, Precision=0.9413, Recall=0.9398, Time=0.41s
"
"1","  Fold 5/5: Accuracy=0.9505, Precision=0.9516, Recall=0.9505, Time=0.41s
  Average: Accuracy=0.9457, Precision=0.9468, Recall=0.9457, F1=0.9462, Time=2.47s
Testing KNN model with n_neighbors=11, weights=uniform, p=2
  Fold 1/5: Accuracy=0.9366, Precision=0.9374, Recall=0.9366, Time=0.16s
  Fold 2/5: Accuracy=0.9484, Precision=0.9490, Recall=0.9484, Time=0.12s
"
"1","  Fold 3/5: Accuracy=0.9473, Precision=0.9479, Recall=0.9473, Time=0.12s
  Fold 4/5: Accuracy=0.9338, Precision=0.9347, Recall=0.9338, Time=0.14s
  Fold 5/5: Accuracy=0.9484, Precision=0.9493, Recall=0.9484, Time=0.16s
  Average: Accuracy=0.9429, Precision=0.9437, Recall=0.9429, F1=0.9433, Time=0.70s
Testing KNN model with n_neighbors=11, weights=distance, p=2
"
"1","  Fold 1/5: Accuracy=0.9403, Precision=0.9414, Recall=0.9403, Time=0.15s
  Fold 2/5: Accuracy=0.9505, Precision=0.9511, Recall=0.9505, Time=0.12s
  Fold 3/5: Accuracy=0.9505, Precision=0.9510, Recall=0.9505, Time=0.15s
"
"1","  Fold 4/5: Accuracy=0.9349, Precision=0.9356, Recall=0.9349, Time=0.17s
  Fold 5/5: Accuracy=0.9505, Precision=0.9515, Recall=0.9505, Time=0.15s
  Average: Accuracy=0.9454, Precision=0.9461, Recall=0.9454, F1=0.9457, Time=0.74s
"
