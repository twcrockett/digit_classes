"0","#| warning: false"
"0","#| output: false"
"0","#| echo: false"
"0",""
"0","def svm_classifier(X_train, X_test, y_train, y_test, C, kernel, gamma):"
"0","    # Scale data"
"0","    scaler = StandardScaler()"
"0","    X_train_scaled = scaler.fit_transform(X_train)"
"0","    X_test_scaled = scaler.transform(X_test)"
"0","    "
"0","    # Train SVM classifier"
"0","    clf = SVC(C=C, kernel=kernel, gamma=gamma, random_state=48)"
"0","    clf.fit(X_train_scaled, y_train)"
"0","    "
"0","    # Predict"
"0","    y_pred = clf.predict(X_test_scaled)"
"0","    "
"0","    return y_pred"
"0","    "
"0","svm_results = []"
"0",""
"0","for params in ParameterGrid(param_grids[""SVM""]):"
"0","    # Track metrics across folds"
"0","    fold_accuracies = []"
"0","    fold_precisions = []"
"0","    fold_recalls = []"
"0","    fold_times = []"
"0","    "
"0","    print(f""Testing SVM model with C={params['C']}, kernel={params['kernel']}, gamma={params['gamma']}"")"
"0","    "
"0","    # Perform k-fold cross-validation"
"0","    for fold_idx, (train_idx, test_idx) in enumerate(skf.split(X, y)):"
"0","        X_train, X_test = X[train_idx], X[test_idx]"
"0","        y_train, y_test = y[train_idx], y[test_idx]"
"0","        "
"0","        start_time = time.time()"
"0","        y_pred = svm_classifier(X_train, X_test, y_train, y_test, params['C'], params['kernel'], params['gamma'])"
"0","        elapsed_time = time.time() - start_time"
"0","        fold_times.append(elapsed_time)"
"0","        "
"0","        accuracy = accuracy_score(y_test, y_pred)"
"0","        report = classification_report(y_test, y_pred, output_dict=True)"
"0","        precision = report['weighted avg']['precision']"
"0","        recall = report['weighted avg']['recall']"
"0","        "
"0","        # Store results for this fold"
"0","        fold_accuracies.append(accuracy)"
"0","        fold_precisions.append(precision)"
"0","        fold_recalls.append(recall)"
"0","        "
"0","        print(f""  Fold {fold_idx+1}/{skf.n_splits}: Accuracy={accuracy:.4f}, Precision={precision:.4f}, Recall={recall:.4f}, Time={elapsed_time:.2f}s"")"
"0","    "
"0","    # Compute average metrics across all folds"
"0","    mean_accuracy = np.mean(fold_accuracies)"
"0","    mean_precision = np.mean(fold_precisions)"
"0","    mean_recall = np.mean(fold_recalls)"
"0","    total_time = sum(fold_times)"
"0","    f1_score = 2 * (mean_precision * mean_recall) / (mean_precision + mean_recall)"
"0","    "
"0","    # Store results for this parameter combination"
"0","    result = {"
"0","        'C': params['C'],"
"0","        'kernel': params['kernel'],"
"0","        'gamma': params['gamma'],"
"0","        'mean_accuracy': mean_accuracy,"
"0","        'mean_precision': mean_precision,"
"0","        'mean_recall': mean_recall,"
"0","        'f1_score': f1_score,"
"0","        'total_time': total_time"
"0","    }"
"0","    svm_results.append(result)"
"0","    "
"0","    print(f""  Average: Accuracy={mean_accuracy:.4f}, Precision={mean_precision:.4f}, Recall={mean_recall:.4f}, F1={f1_score:.4f}, Time={total_time:.2f}s"")"
"0","    "
"0","svm_df = calculate_selection_score(pd.DataFrame(svm_results))"
"1","Testing SVM model with C=0.1, kernel=linear, gamma=scale
"
"1","  Fold 1/5: Accuracy=0.9516, Precision=0.9519, Recall=0.9516, Time=0.65s
"
"1","  Fold 2/5: Accuracy=0.9538, Precision=0.9540, Recall=0.9538, Time=0.68s
"
"1","  Fold 3/5: Accuracy=0.9511, Precision=0.9518, Recall=0.9511, Time=0.68s
"
"1","  Fold 4/5: Accuracy=0.9457, Precision=0.9460, Recall=0.9457, Time=0.69s
"
"1","  Fold 5/5: Accuracy=0.9548, Precision=0.9551, Recall=0.9548, Time=0.64s
  Average: Accuracy=0.9514, Precision=0.9517, Recall=0.9514, F1=0.9516, Time=3.33s
"
